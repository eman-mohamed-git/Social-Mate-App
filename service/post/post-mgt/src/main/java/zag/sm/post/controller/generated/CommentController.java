/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zag.sm.post.controller.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import zag.sm.post.model.generated.CommentDTO;
import zag.sm.post.model.generated.CommentReactions;
import zag.sm.post.model.generated.CommentResultSet;
import zag.sm.post.model.generated.ErrorVTO;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Controller
@Tag(name = "Comment", description = "the Comment API")
public interface CommentController {

    /**
     * POST /posts/{postId}/comments : Create Comment
     *
     * @param postId
     *            (required)
     * @param commentDTO
     *            (required)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "createComment", summary = "Create Comment", tags = { "Comment" }, responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class)) }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/posts/{postId}/comments", produces = {
            "application/json" }, consumes = { "application/json" })

    ResponseEntity<Long> _createComment(
            @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") Long postId,
            @Parameter(name = "CommentDTO", description = "", required = true) @Valid @RequestBody CommentDTO commentDTO);

    /**
     * DELETE /posts/{postId}/comments/{commentId} : Delete Comment
     *
     * @param postId
     *            (required)
     * @param commentId
     *            (required)
     *
     * @return No Content (status code 204) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "deleteComment", summary = "Delete Comment", tags = { "Comment" }, responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/posts/{postId}/comments/{commentId}", produces = {
            "application/json" })

    ResponseEntity<Void> _deleteComment(
            @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") Long postId,
            @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") Long commentId);

    /**
     * GET /posts/{postId}/comments : Retrieve All Comments With Pagination
     *
     * @param postId
     *            (required)
     * @param pageOffset
     *            Pagination Page Offset (optional, default to 0)
     * @param pageSize
     *            Pagination Page Size (optional, default to 10)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllComments", summary = "Retrieve All Comments With Pagination", tags = {
            "Comment" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = CommentResultSet.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/posts/{postId}/comments", produces = { "application/json" })

    ResponseEntity<CommentResultSet> _getAllComments(
            @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") Long postId,
            @Parameter(name = "pageOffset", description = "Pagination Page Offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageOffset", required = false, defaultValue = "0") Integer pageOffset,
            @Parameter(name = "pageSize", description = "Pagination Page Size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize);

    /**
     * GET /posts/{postId}/comments/count : Get all Comments Count of a post
     *
     * @param postId
     *            (required)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllCommentsCount", summary = "Get all Comments Count of a post", tags = {
            "Comment" }, responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/posts/{postId}/comments/count", produces = {
            "application/json" })

    ResponseEntity<Long> _getAllCommentsCount(
            @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") Long postId);

    /**
     * POST /posts/{postId}/comments/{commentId}/{reaction} : React to a Comment
     *
     * @param postId
     *            (required)
     * @param commentId
     *            (required)
     * @param reaction
     *            Comment Reaction (required)
     *
     * @return No Content (status code 204) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "reactComment", summary = "React to a Comment", tags = { "Comment" }, responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/posts/{postId}/comments/{commentId}/{reaction}", produces = {
            "application/json" })

    ResponseEntity<Void> _reactComment(
            @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") Long postId,
            @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") Long commentId,
            @Parameter(name = "reaction", description = "Comment Reaction", required = true, in = ParameterIn.PATH) @PathVariable("reaction") CommentReactions reaction);

}
