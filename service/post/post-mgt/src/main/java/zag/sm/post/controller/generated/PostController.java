/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zag.sm.post.controller.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import zag.sm.post.model.generated.ErrorVTO;
import zag.sm.post.model.generated.GetAllPostsOrderByAttributes;
import zag.sm.post.model.generated.OrderDirections;
import zag.sm.post.model.generated.PostDTO;
import zag.sm.post.model.generated.PostResultSet;
import zag.sm.post.model.generated.PostVTO;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Controller
@Tag(name = "Post", description = "the Post API")
public interface PostController {

    /**
     * POST /posts : Create a new post
     *
     * @param postDTO
     *            (required)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "createPost", summary = "Create a new post", tags = { "Post" }, responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class)) }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/posts", produces = { "application/json" }, consumes = {
            "application/json" })

    ResponseEntity<Long> _createPost(
            @Parameter(name = "PostDTO", description = "", required = true) @Valid @RequestBody PostDTO postDTO);

    /**
     * DELETE /posts/{id} : Delete a post by ID
     *
     * @param id
     *            The ID of the post to delete (required)
     *
     * @return No Content (status code 204) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "deletePost", summary = "Delete a post by ID", tags = { "Post" }, responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/posts/{id}", produces = { "application/json" })

    ResponseEntity<Void> _deletePost(
            @Parameter(name = "id", description = "The ID of the post to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id);

    /**
     * GET /posts : Retrieve All Posts With Filters, Sorting &amp; Pagination
     *
     * @param title
     *            Post Title (optional)
     * @param createdById
     *            Post Owner (optional)
     * @param createdOnFrom
     *            Post Creation Date From (optional)
     * @param createdOnTo
     *            Post Creation Date To (optional)
     * @param orderBy
     *            Order Attribute (optional)
     * @param orderDir
     *            Order Direction (optional, default to DESC)
     * @param pageOffset
     *            Pagination Page Offset (optional, default to 0)
     * @param pageSize
     *            Pagination Page Size (optional, default to 10)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllPostsByFilters", summary = "Retrieve All Posts With Filters, Sorting & Pagination", tags = {
            "Post" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = PostResultSet.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/posts", produces = { "application/json" })

    ResponseEntity<PostResultSet> _getAllPostsByFilters(
            @Parameter(name = "title", description = "Post Title", in = ParameterIn.QUERY) @Valid @RequestParam(value = "title", required = false) String title,
            @Parameter(name = "createdById", description = "Post Owner", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdById", required = false) Long createdById,
            @Parameter(name = "createdOnFrom", description = "Post Creation Date From", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOnFrom", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date createdOnFrom,
            @Parameter(name = "createdOnTo", description = "Post Creation Date To", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOnTo", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date createdOnTo,
            @Parameter(name = "orderBy", description = "Order Attribute", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) GetAllPostsOrderByAttributes orderBy,
            @Parameter(name = "orderDir", description = "Order Direction", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderDir", required = false, defaultValue = "DESC") OrderDirections orderDir,
            @Parameter(name = "pageOffset", description = "Pagination Page Offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageOffset", required = false, defaultValue = "0") Integer pageOffset,
            @Parameter(name = "pageSize", description = "Pagination Page Size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize);

    /**
     * GET /posts/{id} : Retrieve a post by ID
     *
     * @param id
     *            (required)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getPostById", summary = "Retrieve a post by ID", tags = { "Post" }, responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = PostVTO.class)) }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/posts/{id}", produces = { "application/json" })

    ResponseEntity<PostVTO> _getPostById(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id);

    /**
     * GET /posts/{id}/getSpecific : Retrieve a post by IDو Even if the post is deleted
     *
     * @param id
     *            (required)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getSpecificPost", summary = "Retrieve a post by IDو Even if the post is deleted", tags = {
            "Post" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = PostVTO.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/posts/{id}/getSpecific", produces = { "application/json" })

    ResponseEntity<PostVTO> _getSpecificPost(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id);

}
