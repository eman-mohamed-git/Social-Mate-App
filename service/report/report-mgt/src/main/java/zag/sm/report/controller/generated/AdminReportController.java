/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zag.sm.report.controller.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;

import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import zag.sm.report.model.generated.ErrorVTO;
import zag.sm.report.model.generated.FullReportDetails;
import zag.sm.report.model.generated.LightReportResultSet;
import zag.sm.report.model.generated.OrderByAttributes;
import zag.sm.report.model.generated.OrderDirections;
import zag.sm.report.model.generated.PerformActionRequest;
import zag.sm.report.model.generated.ReportActions;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Controller
@Tag(name = "Admin Report", description = "the Admin Report API")
public interface AdminReportController {

    /**
     * GET /reports : Retrieve All Reports With Filters, Sorting &amp; Pagination
     *
     * @param statusId
     *            Report Status (optional)
     * @param categoryId
     *            Report Category (optional)
     * @param createdOnFrom
     *            Report Creation Date From (optional)
     * @param createdOnTo
     *            Report Creation Date To (optional)
     * @param orderBy
     *            Order Attribute (optional)
     * @param orderDir
     *            Order Direction (optional, default to DESC)
     * @param pageOffset
     *            Pagination Page Offset (optional, default to 0)
     * @param pageSize
     *            Pagination Page Size (optional, default to 10)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllReportsByFilters", summary = "Retrieve All Reports With Filters, Sorting & Pagination", tags = {
            "Admin Report" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = LightReportResultSet.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/reports", produces = { "application/json" })

    ResponseEntity<LightReportResultSet> _getAllReportsByFilters(
            @Parameter(name = "statusId", description = "Report Status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statusId", required = false) Integer statusId,
            @Parameter(name = "categoryId", description = "Report Category", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId,
            @Parameter(name = "createdOnFrom", description = "Report Creation Date From", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOnFrom", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date createdOnFrom,
            @Parameter(name = "createdOnTo", description = "Report Creation Date To", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOnTo", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date createdOnTo,
            @Parameter(name = "orderBy", description = "Order Attribute", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) OrderByAttributes orderBy,
            @Parameter(name = "orderDir", description = "Order Direction", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderDir", required = false, defaultValue = "DESC") OrderDirections orderDir,
            @Parameter(name = "pageOffset", description = "Pagination Page Offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageOffset", required = false, defaultValue = "0") Integer pageOffset,
            @Parameter(name = "pageSize", description = "Pagination Page Size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize);

    /**
     * GET /posts/reports/{reportId} : Get Report Details and Related Reports By Report Id
     *
     * @param reportId
     *            Report Id To Retrieve The Report (required)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getReportsDetailsById", summary = "Get Report Details and Related Reports By Report Id", tags = {
            "Admin Report" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = FullReportDetails.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/posts/reports/{reportId}", produces = { "application/json" })

    ResponseEntity<FullReportDetails> _getReportsDetailsById(
            @Parameter(name = "reportId", description = "Report Id To Retrieve The Report", required = true, in = ParameterIn.PATH) @PathVariable("reportId") Long reportId);

    /**
     * PUT /reports/{reportId}/actions/{action} : Approve or Reject a Report
     *
     * @param reportId
     *            The ID of the report to act on (required)
     * @param action
     *            The ID of the report to act on (required)
     * @param performActionRequest
     *            (optional)
     *
     * @return No Content (status code 204) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "performAction", summary = "Approve or Reject a Report", tags = {
            "Admin Report" }, responses = { @ApiResponse(responseCode = "204", description = "No Content"),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/reports/{reportId}/actions/{action}", produces = {
            "application/json" }, consumes = { "application/json" })

    ResponseEntity<Void> _performAction(
            @Parameter(name = "reportId", description = "The ID of the report to act on", required = true, in = ParameterIn.PATH) @PathVariable("reportId") Long reportId,
            @Parameter(name = "action", description = "The ID of the report to act on", required = true, in = ParameterIn.PATH) @PathVariable("action") ReportActions action,
            @Parameter(name = "PerformActionRequest", description = "") @Valid @RequestBody(required = false) PerformActionRequest performActionRequest);

}
