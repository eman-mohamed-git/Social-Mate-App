/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zag.sm.user.controller.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import zag.sm.user.model.generated.CreateUserDTO;
import zag.sm.user.model.generated.ErrorVTO;
import zag.sm.user.model.generated.LoginUserDTO;
import zag.sm.user.model.generated.LoginUserVTO;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Controller
@Tag(name = "Auth", description = "the Auth API")
public interface AuthController {

    /**
     * POST /auth/login : Login
     *
     * @param loginUserDTO
     *            (required)
     *
     * @return Ok (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "login", summary = "Login", tags = { "Auth" }, responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = LoginUserVTO.class)) }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/auth/login", produces = { "application/json" }, consumes = {
            "application/json" })

    ResponseEntity<LoginUserVTO> _login(
            @Parameter(name = "LoginUserDTO", description = "", required = true) @Valid @RequestBody LoginUserDTO loginUserDTO);

    /**
     * POST /auth/register : Register User
     *
     * @param createUserDTO
     *            (required)
     *
     * @return Created (status code 201) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "registerUser", summary = "Register User", tags = { "Auth" }, responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/auth/register", produces = {
            "application/json" }, consumes = { "application/json" })

    ResponseEntity<Void> _registerUser(
            @Parameter(name = "CreateUserDTO", description = "", required = true) @Valid @RequestBody CreateUserDTO createUserDTO);

}
