/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zag.sm.user.controller.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import zag.sm.user.model.generated.ErrorVTO;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Controller
@Tag(name = "Role", description = "the Role API")
public interface RoleController {

    /**
     * POST /users/{userId}/roles/{roleId} : Assign a role to a user
     *
     * @param userId
     *            The ID of the user to whom the role will be assigned. (required)
     * @param roleId
     *            The ID of the role to be assigned to the user. (required)
     *
     * @return Created (status code 201) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "assignRoleToUser", summary = "Assign a role to a user", tags = { "Role" }, responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/users/{userId}/roles/{roleId}", produces = {
            "application/json" })

    ResponseEntity<Void> _assignRoleToUser(
            @Parameter(name = "userId", description = "The ID of the user to whom the role will be assigned.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
            @Parameter(name = "roleId", description = "The ID of the role to be assigned to the user.", required = true, in = ParameterIn.PATH) @PathVariable("roleId") Integer roleId);

    /**
     * DELETE /users/{userId}/roles/{roleId} : Remove a role from a user
     *
     * @param userId
     *            The ID of the user from whom the role will be removed. (required)
     * @param roleId
     *            The ID of the role to be removed from the user. (required)
     *
     * @return No Content (status code 204) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "removeRoleFromUser", summary = "Remove a role from a user", tags = {
            "Role" }, responses = { @ApiResponse(responseCode = "204", description = "No Content"),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/users/{userId}/roles/{roleId}", produces = {
            "application/json" })

    ResponseEntity<Void> _removeRoleFromUser(
            @Parameter(name = "userId", description = "The ID of the user from whom the role will be removed.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
            @Parameter(name = "roleId", description = "The ID of the role to be removed from the user.", required = true, in = ParameterIn.PATH) @PathVariable("roleId") Integer roleId);

}
