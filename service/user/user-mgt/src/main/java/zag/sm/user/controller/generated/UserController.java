/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zag.sm.user.controller.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import zag.sm.user.model.generated.ErrorVTO;
import zag.sm.user.model.generated.UserResultSet;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Controller
@Tag(name = "User", description = "the User API")
public interface UserController {

    /**
     * GET /users : Retrieve All Users With Pagination
     *
     * @param ids
     *            Comma-separated list of user IDs to retrieve (optional)
     * @param fullName
     *            (optional)
     * @param pageNum
     *            (optional, default to 0)
     * @param pageSize
     *            (optional, default to 10)
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getUsersByIds", summary = "Retrieve All Users With Pagination", tags = {
            "User" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = UserResultSet.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/users", produces = { "application/json" })

    ResponseEntity<UserResultSet> _getUsersByIds(
            @Parameter(name = "ids", description = "Comma-separated list of user IDs to retrieve", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = false) List<Long> ids,
            @Parameter(name = "fullName", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fullName", required = false) String fullName,
            @Parameter(name = "pageNum", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNum", required = false, defaultValue = "0") Integer pageNum,
            @Parameter(name = "pageSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize);

}
